
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd4  08002cd4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd4  08002cd4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000006c  08002d48  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002d48  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ec5  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f56  00000000  00000000  00028f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000822  00000000  00000000  0002b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001830e  00000000  00000000  0002c1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbff  00000000  00000000  000444e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000861ac  00000000  00000000  000520df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d6c  00000000  00000000  000d828c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000daff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c84 	.word	0x08002c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002c84 	.word	0x08002c84

0800014c <off_all_light_1>:
trafficLight_t light_1;
trafficLight_t light_2;
uint8_t time[3] = {10, 7, 3}; // R G A

static void off_all_light_1()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin | GREEN_1_Pin | YELLOW_1_Pin, LED_OFF);
 8000150:	2200      	movs	r2, #0
 8000152:	2107      	movs	r1, #7
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <off_all_light_1+0x14>)
 8000156:	f001 fc62 	bl	8001a1e <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <off_all_light_2>:

static void off_all_light_2()
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin | GREEN_2_Pin | YELLOW_2_Pin, LED_OFF);
 8000168:	2200      	movs	r2, #0
 800016a:	2138      	movs	r1, #56	; 0x38
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <off_all_light_2+0x14>)
 800016e:	f001 fc56 	bl	8001a1e <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010c00 	.word	0x40010c00

0800017c <automatic_run>:

void automatic_run(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	update_7seg_buffer(MODE_SEG, mode);
 8000180:	4bbb      	ldr	r3, [pc, #748]	; (8000470 <automatic_run+0x2f4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	4619      	mov	r1, r3
 8000186:	2002      	movs	r0, #2
 8000188:	f000 fd16 	bl	8000bb8 <update_7seg_buffer>
	if (isTimerExpired(ONE_SECOND_TIMER)) 
 800018c:	2003      	movs	r0, #3
 800018e:	f001 f8cb 	bl	8001328 <isTimerExpired>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d009      	beq.n	80001ac <automatic_run+0x30>
	{
		update_7seg_buffer_time();
 8000198:	f000 fcea 	bl	8000b70 <update_7seg_buffer_time>
		if (mode == NORMAL_MODE)
 800019c:	4bb4      	ldr	r3, [pc, #720]	; (8000470 <automatic_run+0x2f4>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <automatic_run+0x30>
			setTimer(ONE_SECOND_TIMER, ONE_SECOND);
 80001a4:	2164      	movs	r1, #100	; 0x64
 80001a6:	2003      	movs	r0, #3
 80001a8:	f001 f88a 	bl	80012c0 <setTimer>
	}
	if (!is_button_pressed(MODE_BTN)) flag_mode = 1;
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fbb1 	bl	8000914 <is_button_pressed>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d102      	bne.n	80001be <automatic_run+0x42>
 80001b8:	4bae      	ldr	r3, [pc, #696]	; (8000474 <automatic_run+0x2f8>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
	switch (light_1)
 80001be:	4bae      	ldr	r3, [pc, #696]	; (8000478 <automatic_run+0x2fc>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b04      	cmp	r3, #4
 80001c4:	f200 8090 	bhi.w	80002e8 <automatic_run+0x16c>
 80001c8:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <automatic_run+0x54>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	080002a7 	.word	0x080002a7
 80001d4:	08000223 	.word	0x08000223
 80001d8:	08000265 	.word	0x08000265
 80001dc:	080002e9 	.word	0x080002e9
 80001e0:	080001e5 	.word	0x080001e5
	{
	case INIT:
		if (1) // ko dieu kien
		{
			light_1 = RED;
 80001e4:	4ba4      	ldr	r3, [pc, #656]	; (8000478 <automatic_run+0x2fc>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_1_SEG, time[RED]);
 80001ea:	4ba4      	ldr	r3, [pc, #656]	; (800047c <automatic_run+0x300>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4619      	mov	r1, r3
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fce1 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_1();
 80001f6:	f7ff ffa9 	bl	800014c <off_all_light_1>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, LED_ON);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2101      	movs	r1, #1
 80001fe:	48a0      	ldr	r0, [pc, #640]	; (8000480 <automatic_run+0x304>)
 8000200:	f001 fc0d 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_1_TIMER, time[RED] * ONE_SECOND);
 8000204:	4b9d      	ldr	r3, [pc, #628]	; (800047c <automatic_run+0x300>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	fb02 f303 	mul.w	r3, r2, r3
 8000210:	4619      	mov	r1, r3
 8000212:	2000      	movs	r0, #0
 8000214:	f001 f854 	bl	80012c0 <setTimer>
			setTimer(ONE_SECOND_TIMER, ONE_SECOND);
 8000218:	2164      	movs	r1, #100	; 0x64
 800021a:	2003      	movs	r0, #3
 800021c:	f001 f850 	bl	80012c0 <setTimer>
		}
		break;
 8000220:	e069      	b.n	80002f6 <automatic_run+0x17a>
	case GREEN:
		if (isTimerExpired(TRAFFIC_LIGHT_1_TIMER) == 1)
 8000222:	2000      	movs	r0, #0
 8000224:	f001 f880 	bl	8001328 <isTimerExpired>
 8000228:	4603      	mov	r3, r0
 800022a:	2b01      	cmp	r3, #1
 800022c:	d15e      	bne.n	80002ec <automatic_run+0x170>
		{
			light_1 = AMBER;
 800022e:	4b92      	ldr	r3, [pc, #584]	; (8000478 <automatic_run+0x2fc>)
 8000230:	2202      	movs	r2, #2
 8000232:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_1_SEG, time[AMBER]);
 8000234:	4b91      	ldr	r3, [pc, #580]	; (800047c <automatic_run+0x300>)
 8000236:	789b      	ldrb	r3, [r3, #2]
 8000238:	4619      	mov	r1, r3
 800023a:	2000      	movs	r0, #0
 800023c:	f000 fcbc 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_1();
 8000240:	f7ff ff84 	bl	800014c <off_all_light_1>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, LED_ON);
 8000244:	2201      	movs	r2, #1
 8000246:	2102      	movs	r1, #2
 8000248:	488d      	ldr	r0, [pc, #564]	; (8000480 <automatic_run+0x304>)
 800024a:	f001 fbe8 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_1_TIMER, time[AMBER] * ONE_SECOND);
 800024e:	4b8b      	ldr	r3, [pc, #556]	; (800047c <automatic_run+0x300>)
 8000250:	789b      	ldrb	r3, [r3, #2]
 8000252:	461a      	mov	r2, r3
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	fb02 f303 	mul.w	r3, r2, r3
 800025a:	4619      	mov	r1, r3
 800025c:	2000      	movs	r0, #0
 800025e:	f001 f82f 	bl	80012c0 <setTimer>
		}
		break;
 8000262:	e043      	b.n	80002ec <automatic_run+0x170>
	case AMBER:
		if (isTimerExpired(TRAFFIC_LIGHT_1_TIMER) == 1)
 8000264:	2000      	movs	r0, #0
 8000266:	f001 f85f 	bl	8001328 <isTimerExpired>
 800026a:	4603      	mov	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	d13f      	bne.n	80002f0 <automatic_run+0x174>
		{
			light_1 = RED;
 8000270:	4b81      	ldr	r3, [pc, #516]	; (8000478 <automatic_run+0x2fc>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_1_SEG, time[RED]);
 8000276:	4b81      	ldr	r3, [pc, #516]	; (800047c <automatic_run+0x300>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4619      	mov	r1, r3
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fc9b 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_1();
 8000282:	f7ff ff63 	bl	800014c <off_all_light_1>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, LED_ON);
 8000286:	2201      	movs	r2, #1
 8000288:	2101      	movs	r1, #1
 800028a:	487d      	ldr	r0, [pc, #500]	; (8000480 <automatic_run+0x304>)
 800028c:	f001 fbc7 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_1_TIMER, time[RED] * ONE_SECOND);
 8000290:	4b7a      	ldr	r3, [pc, #488]	; (800047c <automatic_run+0x300>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	fb02 f303 	mul.w	r3, r2, r3
 800029c:	4619      	mov	r1, r3
 800029e:	2000      	movs	r0, #0
 80002a0:	f001 f80e 	bl	80012c0 <setTimer>
		}
		break;
 80002a4:	e024      	b.n	80002f0 <automatic_run+0x174>
	case RED:
		if (isTimerExpired(TRAFFIC_LIGHT_1_TIMER) == 1)
 80002a6:	2000      	movs	r0, #0
 80002a8:	f001 f83e 	bl	8001328 <isTimerExpired>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d120      	bne.n	80002f4 <automatic_run+0x178>
		{
			light_1 = GREEN;
 80002b2:	4b71      	ldr	r3, [pc, #452]	; (8000478 <automatic_run+0x2fc>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_1_SEG, time[GREEN]);
 80002b8:	4b70      	ldr	r3, [pc, #448]	; (800047c <automatic_run+0x300>)
 80002ba:	785b      	ldrb	r3, [r3, #1]
 80002bc:	4619      	mov	r1, r3
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 fc7a 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_1();
 80002c4:	f7ff ff42 	bl	800014c <off_all_light_1>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, LED_ON);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2104      	movs	r1, #4
 80002cc:	486c      	ldr	r0, [pc, #432]	; (8000480 <automatic_run+0x304>)
 80002ce:	f001 fba6 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_1_TIMER, time[GREEN] * ONE_SECOND);
 80002d2:	4b6a      	ldr	r3, [pc, #424]	; (800047c <automatic_run+0x300>)
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	461a      	mov	r2, r3
 80002d8:	2364      	movs	r3, #100	; 0x64
 80002da:	fb02 f303 	mul.w	r3, r2, r3
 80002de:	4619      	mov	r1, r3
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 ffed 	bl	80012c0 <setTimer>
		}
		break;
 80002e6:	e005      	b.n	80002f4 <automatic_run+0x178>
	default:
		break;
 80002e8:	bf00      	nop
 80002ea:	e004      	b.n	80002f6 <automatic_run+0x17a>
		break;
 80002ec:	bf00      	nop
 80002ee:	e002      	b.n	80002f6 <automatic_run+0x17a>
		break;
 80002f0:	bf00      	nop
 80002f2:	e000      	b.n	80002f6 <automatic_run+0x17a>
		break;
 80002f4:	bf00      	nop
	}

	switch (light_2)
 80002f6:	4b63      	ldr	r3, [pc, #396]	; (8000484 <automatic_run+0x308>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b04      	cmp	r3, #4
 80002fc:	f200 808c 	bhi.w	8000418 <automatic_run+0x29c>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <automatic_run+0x18c>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	080003d7 	.word	0x080003d7
 800030c:	08000353 	.word	0x08000353
 8000310:	08000395 	.word	0x08000395
 8000314:	08000419 	.word	0x08000419
 8000318:	0800031d 	.word	0x0800031d
	{
	case INIT:
		if (1) // ko dieu kien
		{
			light_2 = GREEN;
 800031c:	4b59      	ldr	r3, [pc, #356]	; (8000484 <automatic_run+0x308>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_2_SEG, time[GREEN]);
 8000322:	4b56      	ldr	r3, [pc, #344]	; (800047c <automatic_run+0x300>)
 8000324:	785b      	ldrb	r3, [r3, #1]
 8000326:	4619      	mov	r1, r3
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fc45 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_2();
 800032e:	f7ff ff19 	bl	8000164 <off_all_light_2>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, LED_ON);
 8000332:	2201      	movs	r2, #1
 8000334:	2120      	movs	r1, #32
 8000336:	4852      	ldr	r0, [pc, #328]	; (8000480 <automatic_run+0x304>)
 8000338:	f001 fb71 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_2_TIMER, time[GREEN] * ONE_SECOND);
 800033c:	4b4f      	ldr	r3, [pc, #316]	; (800047c <automatic_run+0x300>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	461a      	mov	r2, r3
 8000342:	2364      	movs	r3, #100	; 0x64
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	4619      	mov	r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	f000 ffb8 	bl	80012c0 <setTimer>
		}
		break;
 8000350:	e069      	b.n	8000426 <automatic_run+0x2aa>
	case GREEN:
		if (isTimerExpired(TRAFFIC_LIGHT_2_TIMER) == 1)
 8000352:	2001      	movs	r0, #1
 8000354:	f000 ffe8 	bl	8001328 <isTimerExpired>
 8000358:	4603      	mov	r3, r0
 800035a:	2b01      	cmp	r3, #1
 800035c:	d15e      	bne.n	800041c <automatic_run+0x2a0>
		{
			light_2 = AMBER;
 800035e:	4b49      	ldr	r3, [pc, #292]	; (8000484 <automatic_run+0x308>)
 8000360:	2202      	movs	r2, #2
 8000362:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_2_SEG, time[AMBER]);
 8000364:	4b45      	ldr	r3, [pc, #276]	; (800047c <automatic_run+0x300>)
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	4619      	mov	r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	f000 fc24 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_2();
 8000370:	f7ff fef8 	bl	8000164 <off_all_light_2>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, LED_ON);
 8000374:	2201      	movs	r2, #1
 8000376:	2110      	movs	r1, #16
 8000378:	4841      	ldr	r0, [pc, #260]	; (8000480 <automatic_run+0x304>)
 800037a:	f001 fb50 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_2_TIMER, time[AMBER] * ONE_SECOND);
 800037e:	4b3f      	ldr	r3, [pc, #252]	; (800047c <automatic_run+0x300>)
 8000380:	789b      	ldrb	r3, [r3, #2]
 8000382:	461a      	mov	r2, r3
 8000384:	2364      	movs	r3, #100	; 0x64
 8000386:	fb02 f303 	mul.w	r3, r2, r3
 800038a:	4619      	mov	r1, r3
 800038c:	2001      	movs	r0, #1
 800038e:	f000 ff97 	bl	80012c0 <setTimer>
		}
		break;
 8000392:	e043      	b.n	800041c <automatic_run+0x2a0>
	case AMBER:
		if (isTimerExpired(TRAFFIC_LIGHT_2_TIMER) == 1)
 8000394:	2001      	movs	r0, #1
 8000396:	f000 ffc7 	bl	8001328 <isTimerExpired>
 800039a:	4603      	mov	r3, r0
 800039c:	2b01      	cmp	r3, #1
 800039e:	d13f      	bne.n	8000420 <automatic_run+0x2a4>
		{
			light_2 = RED;
 80003a0:	4b38      	ldr	r3, [pc, #224]	; (8000484 <automatic_run+0x308>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_2_SEG, time[RED]);
 80003a6:	4b35      	ldr	r3, [pc, #212]	; (800047c <automatic_run+0x300>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	4619      	mov	r1, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	f000 fc03 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_2();
 80003b2:	f7ff fed7 	bl	8000164 <off_all_light_2>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, LED_ON);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2108      	movs	r1, #8
 80003ba:	4831      	ldr	r0, [pc, #196]	; (8000480 <automatic_run+0x304>)
 80003bc:	f001 fb2f 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_2_TIMER, time[RED] * ONE_SECOND);
 80003c0:	4b2e      	ldr	r3, [pc, #184]	; (800047c <automatic_run+0x300>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	2364      	movs	r3, #100	; 0x64
 80003c8:	fb02 f303 	mul.w	r3, r2, r3
 80003cc:	4619      	mov	r1, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 ff76 	bl	80012c0 <setTimer>
		}
		break;
 80003d4:	e024      	b.n	8000420 <automatic_run+0x2a4>
	case RED:
		if (isTimerExpired(TRAFFIC_LIGHT_2_TIMER) == 1)
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 ffa6 	bl	8001328 <isTimerExpired>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d120      	bne.n	8000424 <automatic_run+0x2a8>
		{
			light_2 = GREEN;
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <automatic_run+0x308>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
			update_7seg_buffer(LIGHT_2_SEG, time[GREEN]);
 80003e8:	4b24      	ldr	r3, [pc, #144]	; (800047c <automatic_run+0x300>)
 80003ea:	785b      	ldrb	r3, [r3, #1]
 80003ec:	4619      	mov	r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	f000 fbe2 	bl	8000bb8 <update_7seg_buffer>
			off_all_light_2();
 80003f4:	f7ff feb6 	bl	8000164 <off_all_light_2>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, LED_ON);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2120      	movs	r1, #32
 80003fc:	4820      	ldr	r0, [pc, #128]	; (8000480 <automatic_run+0x304>)
 80003fe:	f001 fb0e 	bl	8001a1e <HAL_GPIO_WritePin>
			setTimer(TRAFFIC_LIGHT_2_TIMER, time[GREEN] * ONE_SECOND);
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <automatic_run+0x300>)
 8000404:	785b      	ldrb	r3, [r3, #1]
 8000406:	461a      	mov	r2, r3
 8000408:	2364      	movs	r3, #100	; 0x64
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	4619      	mov	r1, r3
 8000410:	2001      	movs	r0, #1
 8000412:	f000 ff55 	bl	80012c0 <setTimer>
		}

		break;
 8000416:	e005      	b.n	8000424 <automatic_run+0x2a8>
	default:
		break;
 8000418:	bf00      	nop
 800041a:	e004      	b.n	8000426 <automatic_run+0x2aa>
		break;
 800041c:	bf00      	nop
 800041e:	e002      	b.n	8000426 <automatic_run+0x2aa>
		break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <automatic_run+0x2aa>
		break;
 8000424:	bf00      	nop
	}
	if (is_button_pressed(MODE_BTN) == 1 && flag_mode == 1)
 8000426:	2000      	movs	r0, #0
 8000428:	f000 fa74 	bl	8000914 <is_button_pressed>
 800042c:	4603      	mov	r3, r0
 800042e:	2b01      	cmp	r3, #1
 8000430:	d11c      	bne.n	800046c <automatic_run+0x2f0>
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <automatic_run+0x2f8>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d118      	bne.n	800046c <automatic_run+0x2f0>
	{
		flag_mode = 0;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <automatic_run+0x2f8>)
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]
		mode = (mode + 1) % NO_MODE;
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <automatic_run+0x2f4>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	425a      	negs	r2, r3
 8000448:	f003 0303 	and.w	r3, r3, #3
 800044c:	f002 0203 	and.w	r2, r2, #3
 8000450:	bf58      	it	pl
 8000452:	4253      	negpl	r3, r2
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <automatic_run+0x2f4>)
 8000458:	701a      	strb	r2, [r3, #0]
		light_1 = MODIFY;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <automatic_run+0x2fc>)
 800045c:	2203      	movs	r2, #3
 800045e:	701a      	strb	r2, [r3, #0]
		light_2 = MODIFY;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <automatic_run+0x308>)
 8000462:	2203      	movs	r2, #3
 8000464:	701a      	strb	r2, [r3, #0]
		modify = INIT_SETTING;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <automatic_run+0x30c>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
	}
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000008d 	.word	0x2000008d
 8000474:	2000008a 	.word	0x2000008a
 8000478:	20000088 	.word	0x20000088
 800047c:	20000000 	.word	0x20000000
 8000480:	40010c00 	.word	0x40010c00
 8000484:	20000089 	.word	0x20000089
 8000488:	2000008c 	.word	0x2000008c

0800048c <modify_run>:
settingLight_t modify;
MODE mode;
uint8_t modify_time[3] = {0};
static uint16_t led_modify_pin[3] = { RED_1_Pin | RED_2_Pin, GREEN_1_Pin | GREEN_2_Pin, YELLOW_1_Pin | YELLOW_2_Pin };
void modify_run (void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	update_7seg_buffer(MODE_SEG, mode);
 8000490:	4b9e      	ldr	r3, [pc, #632]	; (800070c <modify_run+0x280>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4619      	mov	r1, r3
 8000496:	2002      	movs	r0, #2
 8000498:	f000 fb8e 	bl	8000bb8 <update_7seg_buffer>
	if (!is_button_pressed(MODE_BTN)) flag_mode = 1;
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fa39 	bl	8000914 <is_button_pressed>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <modify_run+0x22>
 80004a8:	4b99      	ldr	r3, [pc, #612]	; (8000710 <modify_run+0x284>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
	switch (modify)
 80004ae:	4b99      	ldr	r3, [pc, #612]	; (8000714 <modify_run+0x288>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	f000 80b1 	beq.w	800061a <modify_run+0x18e>
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	f300 8102 	bgt.w	80006c2 <modify_run+0x236>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d002      	beq.n	80004c8 <modify_run+0x3c>
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d067      	beq.n	8000596 <modify_run+0x10a>
			update_light_time(mode);
			setTimer(MODIFY_TIMER, TIME_OUT * ONE_SECOND);
		}
		break;
	default:
		break;
 80004c6:	e0fc      	b.n	80006c2 <modify_run+0x236>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, led_modify_pin[0] | led_modify_pin[1] | led_modify_pin[2], LED_OFF);
 80004c8:	4b93      	ldr	r3, [pc, #588]	; (8000718 <modify_run+0x28c>)
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	4b92      	ldr	r3, [pc, #584]	; (8000718 <modify_run+0x28c>)
 80004ce:	885b      	ldrh	r3, [r3, #2]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b90      	ldr	r3, [pc, #576]	; (8000718 <modify_run+0x28c>)
 80004d6:	889b      	ldrh	r3, [r3, #4]
 80004d8:	4313      	orrs	r3, r2
 80004da:	b29b      	uxth	r3, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	488e      	ldr	r0, [pc, #568]	; (800071c <modify_run+0x290>)
 80004e2:	f001 fa9c 	bl	8001a1e <HAL_GPIO_WritePin>
			if (mode == NORMAL_MODE)
 80004e6:	4b89      	ldr	r3, [pc, #548]	; (800070c <modify_run+0x280>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d109      	bne.n	8000502 <modify_run+0x76>
				modify = NORMAL_SETTING;
 80004ee:	4b89      	ldr	r3, [pc, #548]	; (8000714 <modify_run+0x288>)
 80004f0:	2203      	movs	r2, #3
 80004f2:	701a      	strb	r2, [r3, #0]
				light_1 = INIT;
 80004f4:	4b8a      	ldr	r3, [pc, #552]	; (8000720 <modify_run+0x294>)
 80004f6:	2204      	movs	r2, #4
 80004f8:	701a      	strb	r2, [r3, #0]
				light_2 = INIT;
 80004fa:	4b8a      	ldr	r3, [pc, #552]	; (8000724 <modify_run+0x298>)
 80004fc:	2204      	movs	r2, #4
 80004fe:	701a      	strb	r2, [r3, #0]
		break;
 8000500:	e0e4      	b.n	80006cc <modify_run+0x240>
				modify = WAIT_SETTING;
 8000502:	4b84      	ldr	r3, [pc, #528]	; (8000714 <modify_run+0x288>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
				clone_time();
 8000508:	f000 f978 	bl	80007fc <clone_time>
				update_7seg_buffer(LIGHT_1_SEG, modify_time[mode - 1]);
 800050c:	4b7f      	ldr	r3, [pc, #508]	; (800070c <modify_run+0x280>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a85      	ldr	r2, [pc, #532]	; (8000728 <modify_run+0x29c>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	4619      	mov	r1, r3
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fb4d 	bl	8000bb8 <update_7seg_buffer>
				update_7seg_buffer(LIGHT_2_SEG, modify_time[mode - 1]);
 800051e:	4b7b      	ldr	r3, [pc, #492]	; (800070c <modify_run+0x280>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	4a80      	ldr	r2, [pc, #512]	; (8000728 <modify_run+0x29c>)
 8000526:	5cd3      	ldrb	r3, [r2, r3]
 8000528:	4619      	mov	r1, r3
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fb44 	bl	8000bb8 <update_7seg_buffer>
				seg_buffer[0] = modify_time[mode - 1] / 10;
 8000530:	4b76      	ldr	r3, [pc, #472]	; (800070c <modify_run+0x280>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a7c      	ldr	r2, [pc, #496]	; (8000728 <modify_run+0x29c>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	4a7c      	ldr	r2, [pc, #496]	; (800072c <modify_run+0x2a0>)
 800053c:	fba2 2303 	umull	r2, r3, r2, r3
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b7a      	ldr	r3, [pc, #488]	; (8000730 <modify_run+0x2a4>)
 8000546:	701a      	strb	r2, [r3, #0]
				seg_buffer[1] = modify_time[mode - 1] % 10;
 8000548:	4b70      	ldr	r3, [pc, #448]	; (800070c <modify_run+0x280>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	4a76      	ldr	r2, [pc, #472]	; (8000728 <modify_run+0x29c>)
 8000550:	5cd2      	ldrb	r2, [r2, r3]
 8000552:	4b76      	ldr	r3, [pc, #472]	; (800072c <modify_run+0x2a0>)
 8000554:	fba3 1302 	umull	r1, r3, r3, r2
 8000558:	08d9      	lsrs	r1, r3, #3
 800055a:	460b      	mov	r3, r1
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	440b      	add	r3, r1
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b72      	ldr	r3, [pc, #456]	; (8000730 <modify_run+0x2a4>)
 8000568:	705a      	strb	r2, [r3, #1]
				seg_buffer[2] = seg_buffer[0];
 800056a:	4b71      	ldr	r3, [pc, #452]	; (8000730 <modify_run+0x2a4>)
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b70      	ldr	r3, [pc, #448]	; (8000730 <modify_run+0x2a4>)
 8000570:	709a      	strb	r2, [r3, #2]
				seg_buffer[3] = seg_buffer[1];
 8000572:	4b6f      	ldr	r3, [pc, #444]	; (8000730 <modify_run+0x2a4>)
 8000574:	785a      	ldrb	r2, [r3, #1]
 8000576:	4b6e      	ldr	r3, [pc, #440]	; (8000730 <modify_run+0x2a4>)
 8000578:	70da      	strb	r2, [r3, #3]
				setTimer(TRAFFIC_LIGHT_1_TIMER, freq_to_tick(2)); // prepare for waiting mode
 800057a:	2002      	movs	r0, #2
 800057c:	f000 fe0a 	bl	8001194 <freq_to_tick>
 8000580:	4603      	mov	r3, r0
 8000582:	4619      	mov	r1, r3
 8000584:	2000      	movs	r0, #0
 8000586:	f000 fe9b 	bl	80012c0 <setTimer>
				setTimer(MODIFY_TIMER, TIME_OUT * ONE_SECOND); // prepare for waiting mode
 800058a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800058e:	2002      	movs	r0, #2
 8000590:	f000 fe96 	bl	80012c0 <setTimer>
		break;
 8000594:	e09a      	b.n	80006cc <modify_run+0x240>
		if (isTimerExpired(MODIFY_TIMER) == 1) // out of 10s not modify
 8000596:	2002      	movs	r0, #2
 8000598:	f000 fec6 	bl	8001328 <isTimerExpired>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d105      	bne.n	80005ae <modify_run+0x122>
			modify = INIT_SETTING;
 80005a2:	4b5c      	ldr	r3, [pc, #368]	; (8000714 <modify_run+0x288>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
			mode = NORMAL_MODE;
 80005a8:	4b58      	ldr	r3, [pc, #352]	; (800070c <modify_run+0x280>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
		if (isTimerExpired(TRAFFIC_LIGHT_1_TIMER) == 1)
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 feba 	bl	8001328 <isTimerExpired>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d111      	bne.n	80005de <modify_run+0x152>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, led_modify_pin[mode - 1]);
 80005ba:	4b54      	ldr	r3, [pc, #336]	; (800070c <modify_run+0x280>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a55      	ldr	r2, [pc, #340]	; (8000718 <modify_run+0x28c>)
 80005c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4854      	ldr	r0, [pc, #336]	; (800071c <modify_run+0x290>)
 80005ca:	f001 fa40 	bl	8001a4e <HAL_GPIO_TogglePin>
			setTimer(TRAFFIC_LIGHT_1_TIMER, freq_to_tick(2)); // prepare for waiting mode
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 fde0 	bl	8001194 <freq_to_tick>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4619      	mov	r1, r3
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fe71 	bl	80012c0 <setTimer>
		if (is_button_pressed(MODIFY_BTN) == 1)
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 f998 	bl	8000914 <is_button_pressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d108      	bne.n	80005fc <modify_run+0x170>
			modify = MODIFY_SETTING;
 80005ea:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <modify_run+0x288>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	701a      	strb	r2, [r3, #0]
			setTimer(MODIFY_TIMER, TIME_OUT * ONE_SECOND);
 80005f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 fe63 	bl	80012c0 <setTimer>
		break;
 80005fa:	e064      	b.n	80006c6 <modify_run+0x23a>
		else if (is_button_pressed(SAVE_BTN))
 80005fc:	2002      	movs	r0, #2
 80005fe:	f000 f989 	bl	8000914 <is_button_pressed>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d05e      	beq.n	80006c6 <modify_run+0x23a>
			save_time();
 8000608:	f000 f896 	bl	8000738 <save_time>
			modify = INIT_SETTING;
 800060c:	4b41      	ldr	r3, [pc, #260]	; (8000714 <modify_run+0x288>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
			mode = NORMAL_MODE;
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <modify_run+0x280>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
		break;
 8000618:	e055      	b.n	80006c6 <modify_run+0x23a>
		if (isTimerExpired(MODIFY_TIMER) == 1) // out of 10s not modify
 800061a:	2002      	movs	r0, #2
 800061c:	f000 fe84 	bl	8001328 <isTimerExpired>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d105      	bne.n	8000632 <modify_run+0x1a6>
			modify = INIT_SETTING;
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <modify_run+0x288>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
			mode = NORMAL_MODE;
 800062c:	4b37      	ldr	r3, [pc, #220]	; (800070c <modify_run+0x280>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		if (isTimerExpired(TRAFFIC_LIGHT_1_TIMER) == 1)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fe78 	bl	8001328 <isTimerExpired>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d111      	bne.n	8000662 <modify_run+0x1d6>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, led_modify_pin[mode - 1]);
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <modify_run+0x280>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a34      	ldr	r2, [pc, #208]	; (8000718 <modify_run+0x28c>)
 8000646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064a:	4619      	mov	r1, r3
 800064c:	4833      	ldr	r0, [pc, #204]	; (800071c <modify_run+0x290>)
 800064e:	f001 f9fe 	bl	8001a4e <HAL_GPIO_TogglePin>
			setTimer(TRAFFIC_LIGHT_1_TIMER, freq_to_tick(2)); // prepare for waiting mode
 8000652:	2002      	movs	r0, #2
 8000654:	f000 fd9e 	bl	8001194 <freq_to_tick>
 8000658:	4603      	mov	r3, r0
 800065a:	4619      	mov	r1, r3
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fe2f 	bl	80012c0 <setTimer>
		if (!is_button_pressed(MODIFY_BTN)) flag_modify = 1;
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f956 	bl	8000914 <is_button_pressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d102      	bne.n	8000674 <modify_run+0x1e8>
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <modify_run+0x2a8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
		if (is_button_pressed(SAVE_BTN) == 1)
 8000674:	2002      	movs	r0, #2
 8000676:	f000 f94d 	bl	8000914 <is_button_pressed>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d108      	bne.n	8000692 <modify_run+0x206>
			save_time();
 8000680:	f000 f85a 	bl	8000738 <save_time>
			modify = INIT_SETTING;
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <modify_run+0x288>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
			mode = NORMAL_MODE;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <modify_run+0x280>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e01b      	b.n	80006ca <modify_run+0x23e>
		else if (is_button_pressed(MODIFY_BTN) == 1 && flag_modify == 1)
 8000692:	2001      	movs	r0, #1
 8000694:	f000 f93e 	bl	8000914 <is_button_pressed>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d115      	bne.n	80006ca <modify_run+0x23e>
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <modify_run+0x2a8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d111      	bne.n	80006ca <modify_run+0x23e>
			flag_modify = 0;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <modify_run+0x2a8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
			update_light_time(mode);
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <modify_run+0x280>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f857 	bl	8000764 <update_light_time>
			setTimer(MODIFY_TIMER, TIME_OUT * ONE_SECOND);
 80006b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ba:	2002      	movs	r0, #2
 80006bc:	f000 fe00 	bl	80012c0 <setTimer>
		break;
 80006c0:	e003      	b.n	80006ca <modify_run+0x23e>
		break;
 80006c2:	bf00      	nop
 80006c4:	e002      	b.n	80006cc <modify_run+0x240>
		break;
 80006c6:	bf00      	nop
 80006c8:	e000      	b.n	80006cc <modify_run+0x240>
		break;
 80006ca:	bf00      	nop
	}
	if (is_button_pressed(MODE_BTN) == 1 && flag_mode == 1)
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f921 	bl	8000914 <is_button_pressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d116      	bne.n	8000706 <modify_run+0x27a>
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <modify_run+0x284>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d112      	bne.n	8000706 <modify_run+0x27a>
	{
		flag_mode = 0;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <modify_run+0x284>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
		mode = (mode + 1) % NO_MODE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <modify_run+0x280>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	425a      	negs	r2, r3
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	f002 0203 	and.w	r2, r2, #3
 80006f6:	bf58      	it	pl
 80006f8:	4253      	negpl	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <modify_run+0x280>)
 80006fe:	701a      	strb	r2, [r3, #0]
		modify = INIT_SETTING;
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <modify_run+0x288>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	}
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000008d 	.word	0x2000008d
 8000710:	2000008a 	.word	0x2000008a
 8000714:	2000008c 	.word	0x2000008c
 8000718:	20000004 	.word	0x20000004
 800071c:	40010c00 	.word	0x40010c00
 8000720:	20000088 	.word	0x20000088
 8000724:	20000089 	.word	0x20000089
 8000728:	20000090 	.word	0x20000090
 800072c:	cccccccd 	.word	0xcccccccd
 8000730:	200000b4 	.word	0x200000b4
 8000734:	2000008b 	.word	0x2000008b

08000738 <save_time>:

void save_time()
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
    time[RED]   =   modify_time[RED]; 
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <save_time+0x24>)
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <save_time+0x28>)
 8000742:	701a      	strb	r2, [r3, #0]
    time[GREEN] =   modify_time[GREEN]; 
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <save_time+0x24>)
 8000746:	785a      	ldrb	r2, [r3, #1]
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <save_time+0x28>)
 800074a:	705a      	strb	r2, [r3, #1]
    time[AMBER] =   modify_time[AMBER]; 
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <save_time+0x24>)
 800074e:	789a      	ldrb	r2, [r3, #2]
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <save_time+0x28>)
 8000752:	709a      	strb	r2, [r3, #2]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000090 	.word	0x20000090
 8000760:	20000000 	.word	0x20000000

08000764 <update_light_time>:

void update_light_time(MODE mode)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    if (mode != NORMAL_MODE)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d036      	beq.n	80007e2 <update_light_time+0x7e>
    {
        modify_time[mode - 1] = (modify_time[mode - 1] + 1) % 100;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <update_light_time+0x88>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
 800077c:	3301      	adds	r3, #1
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <update_light_time+0x8c>)
 8000780:	fb82 1203 	smull	r1, r2, r2, r3
 8000784:	1151      	asrs	r1, r2, #5
 8000786:	17da      	asrs	r2, r3, #31
 8000788:	1a8a      	subs	r2, r1, r2
 800078a:	2164      	movs	r1, #100	; 0x64
 800078c:	fb01 f202 	mul.w	r2, r1, r2
 8000790:	1a9a      	subs	r2, r3, r2
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3b01      	subs	r3, #1
 8000796:	b2d1      	uxtb	r1, r2
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <update_light_time+0x88>)
 800079a:	54d1      	strb	r1, [r2, r3]
        seg_buffer[0] = modify_time[mode - 1] / 10;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <update_light_time+0x88>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <update_light_time+0x90>)
 80007a6:	fba2 2303 	umull	r2, r3, r2, r3
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <update_light_time+0x94>)
 80007b0:	701a      	strb	r2, [r3, #0]
        seg_buffer[1] = modify_time[mode - 1] % 10;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <update_light_time+0x88>)
 80007b8:	5cd2      	ldrb	r2, [r2, r3]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <update_light_time+0x90>)
 80007bc:	fba3 1302 	umull	r1, r3, r3, r2
 80007c0:	08d9      	lsrs	r1, r3, #3
 80007c2:	460b      	mov	r3, r1
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <update_light_time+0x94>)
 80007d0:	705a      	strb	r2, [r3, #1]
        seg_buffer[2] = seg_buffer[0];
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <update_light_time+0x94>)
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <update_light_time+0x94>)
 80007d8:	709a      	strb	r2, [r3, #2]
        seg_buffer[3] = seg_buffer[1];
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <update_light_time+0x94>)
 80007dc:	785a      	ldrb	r2, [r3, #1]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <update_light_time+0x94>)
 80007e0:	70da      	strb	r2, [r3, #3]
    }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000090 	.word	0x20000090
 80007f0:	51eb851f 	.word	0x51eb851f
 80007f4:	cccccccd 	.word	0xcccccccd
 80007f8:	200000b4 	.word	0x200000b4

080007fc <clone_time>:

void clone_time()
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
    modify_time[RED]      = time[RED]; 
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <clone_time+0x24>)
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <clone_time+0x28>)
 8000806:	701a      	strb	r2, [r3, #0]
    modify_time[GREEN]    = time[GREEN]; 
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <clone_time+0x24>)
 800080a:	785a      	ldrb	r2, [r3, #1]
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <clone_time+0x28>)
 800080e:	705a      	strb	r2, [r3, #1]
    modify_time[AMBER]    = time[AMBER]; 
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <clone_time+0x24>)
 8000812:	789a      	ldrb	r2, [r3, #2]
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <clone_time+0x28>)
 8000816:	709a      	strb	r2, [r3, #2]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000000 	.word	0x20000000
 8000824:	20000090 	.word	0x20000090

08000828 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
    for (char i = 0; i < N0_OF_BUTTONS; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e056      	b.n	80008e2 <button_reading+0xba>
    {
        debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	492e      	ldr	r1, [pc, #184]	; (80008f4 <button_reading+0xcc>)
 800083a:	5c89      	ldrb	r1, [r1, r2]
 800083c:	4a2e      	ldr	r2, [pc, #184]	; (80008f8 <button_reading+0xd0>)
 800083e:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	492d      	ldr	r1, [pc, #180]	; (80008fc <button_reading+0xd4>)
 8000846:	5c89      	ldrb	r1, [r1, r2]
 8000848:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <button_reading+0xcc>)
 800084a:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(btn_port, btn_pin[i]);
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <button_reading+0xd8>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	492c      	ldr	r1, [pc, #176]	; (8000904 <button_reading+0xdc>)
 8000854:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000858:	79fc      	ldrb	r4, [r7, #7]
 800085a:	4619      	mov	r1, r3
 800085c:	4610      	mov	r0, r2
 800085e:	f001 f8c7 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <button_reading+0xd4>)
 8000868:	551a      	strb	r2, [r3, r4]
        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <button_reading+0xd4>)
 800086e:	5cd2      	ldrb	r2, [r2, r3]
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4920      	ldr	r1, [pc, #128]	; (80008f4 <button_reading+0xcc>)
 8000874:	5ccb      	ldrb	r3, [r1, r3]
 8000876:	429a      	cmp	r2, r3
 8000878:	d10d      	bne.n	8000896 <button_reading+0x6e>
            && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <button_reading+0xcc>)
 800087e:	5cd2      	ldrb	r2, [r2, r3]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	491d      	ldr	r1, [pc, #116]	; (80008f8 <button_reading+0xd0>)
 8000884:	5ccb      	ldrb	r3, [r1, r3]
 8000886:	429a      	cmp	r2, r3
 8000888:	d105      	bne.n	8000896 <button_reading+0x6e>
                buttonBuffer[i] = debounceButtonBuffer1[i];
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	491b      	ldr	r1, [pc, #108]	; (80008fc <button_reading+0xd4>)
 8000890:	5c89      	ldrb	r1, [r1, r2]
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <button_reading+0xe0>)
 8000894:	54d1      	strb	r1, [r2, r3]
        if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <button_reading+0xe0>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d114      	bne.n	80008ca <button_reading+0xa2>
        {
            // if a button is pressed , we start counting
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <button_reading+0xe4>)
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	2b63      	cmp	r3, #99	; 0x63
 80008aa:	d809      	bhi.n	80008c0 <button_reading+0x98>
            {
                counterForButtonPress1s[i]++;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <button_reading+0xe4>)
 80008b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008b4:	3201      	adds	r2, #1
 80008b6:	b291      	uxth	r1, r2
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <button_reading+0xe4>)
 80008ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008be:	e00d      	b.n	80008dc <button_reading+0xb4>
            }
            else
            {   
                // the flag is turned on when 1 second has passed
                // since the button is pressed .
                flagForButtonPress1s[i] = 1;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <button_reading+0xe8>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	54d1      	strb	r1, [r2, r3]
 80008c8:	e008      	b.n	80008dc <button_reading+0xb4>
                // todo
            }
        }
        else
        {
            counterForButtonPress1s[i] = 0;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a0f      	ldr	r2, [pc, #60]	; (800090c <button_reading+0xe4>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <button_reading+0xe8>)
 80008d8:	2100      	movs	r1, #0
 80008da:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < N0_OF_BUTTONS; i++)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	3301      	adds	r3, #1
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d9a5      	bls.n	8000834 <button_reading+0xc>
        }
    }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	200000a0 	.word	0x200000a0
 80008fc:	20000098 	.word	0x20000098
 8000900:	2000000c 	.word	0x2000000c
 8000904:	08002c9c 	.word	0x08002c9c
 8000908:	20000094 	.word	0x20000094
 800090c:	200000a8 	.word	0x200000a8
 8000910:	200000a4 	.word	0x200000a4

08000914 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
    if (index >= N0_OF_BUTTONS)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d901      	bls.n	8000928 <is_button_pressed+0x14>
        return 0;
 8000924:	2300      	movs	r3, #0
 8000926:	e007      	b.n	8000938 <is_button_pressed+0x24>
    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <is_button_pressed+0x30>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000094 	.word	0x20000094

08000948 <display7Seg>:
uint8_t time_buffer[3] = {0};
uint8_t seg_buffer[NUM_OF_SEG_LED] = {0};
const uint16_t SEG[NUM_OF_SEG_LED] = {EN_0_Pin, EN_1_Pin, EN_2_Pin, EN_3_Pin, EN_4_Pin};

void display7Seg(uint8_t num)   
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SEG_0_GPIO_Port, ALL_SEG, SEG_OFF);
 8000952:	2201      	movs	r2, #1
 8000954:	21fe      	movs	r1, #254	; 0xfe
 8000956:	482f      	ldr	r0, [pc, #188]	; (8000a14 <display7Seg+0xcc>)
 8000958:	f001 f861 	bl	8001a1e <HAL_GPIO_WritePin>
    switch (num)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b09      	cmp	r3, #9
 8000960:	d852      	bhi.n	8000a08 <display7Seg+0xc0>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <display7Seg+0x20>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	08000991 	.word	0x08000991
 800096c:	0800099d 	.word	0x0800099d
 8000970:	080009a9 	.word	0x080009a9
 8000974:	080009b5 	.word	0x080009b5
 8000978:	080009c1 	.word	0x080009c1
 800097c:	080009cd 	.word	0x080009cd
 8000980:	080009d9 	.word	0x080009d9
 8000984:	080009e5 	.word	0x080009e5
 8000988:	080009f1 	.word	0x080009f1
 800098c:	080009fd 	.word	0x080009fd
    {
    case 0:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_0, SEG_ON);
 8000990:	2200      	movs	r2, #0
 8000992:	217e      	movs	r1, #126	; 0x7e
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <display7Seg+0xcc>)
 8000996:	f001 f842 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 800099a:	e036      	b.n	8000a0a <display7Seg+0xc2>
    case 1:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_1, SEG_ON);
 800099c:	2200      	movs	r2, #0
 800099e:	210c      	movs	r1, #12
 80009a0:	481c      	ldr	r0, [pc, #112]	; (8000a14 <display7Seg+0xcc>)
 80009a2:	f001 f83c 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009a6:	e030      	b.n	8000a0a <display7Seg+0xc2>
    case 2:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_2, SEG_ON);
 80009a8:	2200      	movs	r2, #0
 80009aa:	21b6      	movs	r1, #182	; 0xb6
 80009ac:	4819      	ldr	r0, [pc, #100]	; (8000a14 <display7Seg+0xcc>)
 80009ae:	f001 f836 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009b2:	e02a      	b.n	8000a0a <display7Seg+0xc2>
    case 3:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_3, SEG_ON);
 80009b4:	2200      	movs	r2, #0
 80009b6:	219e      	movs	r1, #158	; 0x9e
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <display7Seg+0xcc>)
 80009ba:	f001 f830 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009be:	e024      	b.n	8000a0a <display7Seg+0xc2>
    case 4:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_4, SEG_ON);
 80009c0:	2200      	movs	r2, #0
 80009c2:	21cc      	movs	r1, #204	; 0xcc
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <display7Seg+0xcc>)
 80009c6:	f001 f82a 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009ca:	e01e      	b.n	8000a0a <display7Seg+0xc2>
    case 5:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_5, SEG_ON);
 80009cc:	2200      	movs	r2, #0
 80009ce:	21da      	movs	r1, #218	; 0xda
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <display7Seg+0xcc>)
 80009d2:	f001 f824 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009d6:	e018      	b.n	8000a0a <display7Seg+0xc2>
    case 6:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_6, SEG_ON);
 80009d8:	2200      	movs	r2, #0
 80009da:	21fa      	movs	r1, #250	; 0xfa
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <display7Seg+0xcc>)
 80009de:	f001 f81e 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009e2:	e012      	b.n	8000a0a <display7Seg+0xc2>
    case 7:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_7, SEG_ON);
 80009e4:	2200      	movs	r2, #0
 80009e6:	210e      	movs	r1, #14
 80009e8:	480a      	ldr	r0, [pc, #40]	; (8000a14 <display7Seg+0xcc>)
 80009ea:	f001 f818 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009ee:	e00c      	b.n	8000a0a <display7Seg+0xc2>
    case 8:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_8, SEG_ON);
 80009f0:	2200      	movs	r2, #0
 80009f2:	21fe      	movs	r1, #254	; 0xfe
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <display7Seg+0xcc>)
 80009f6:	f001 f812 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 80009fa:	e006      	b.n	8000a0a <display7Seg+0xc2>
    case 9:
        HAL_GPIO_WritePin(SEG_0_GPIO_Port, NUM_9, SEG_ON);
 80009fc:	2200      	movs	r2, #0
 80009fe:	21de      	movs	r1, #222	; 0xde
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <display7Seg+0xcc>)
 8000a02:	f001 f80c 	bl	8001a1e <HAL_GPIO_WritePin>
        break;
 8000a06:	e000      	b.n	8000a0a <display7Seg+0xc2>
    default:
        break;
 8000a08:	bf00      	nop
    }
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800

08000a18 <generate_led_buffer>:

void generate_led_buffer(uint8_t * led_buffer, uint8_t * time_buffer)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    led_buffer[0] = time_buffer[LIGHT_1_SEG] / 10;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <generate_led_buffer+0x7c>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	701a      	strb	r2, [r3, #0]
    led_buffer[1] = time_buffer[LIGHT_1_SEG] % 10;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1c58      	adds	r0, r3, #1
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <generate_led_buffer+0x7c>)
 8000a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a42:	08d9      	lsrs	r1, r3, #3
 8000a44:	460b      	mov	r3, r1
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	7003      	strb	r3, [r0, #0]
    led_buffer[2] = time_buffer[LIGHT_2_SEG] / 10;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	490d      	ldr	r1, [pc, #52]	; (8000a94 <generate_led_buffer+0x7c>)
 8000a5e:	fba1 1202 	umull	r1, r2, r1, r2
 8000a62:	08d2      	lsrs	r2, r2, #3
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
    led_buffer[3] = time_buffer[LIGHT_2_SEG] % 10;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1cd8      	adds	r0, r3, #3
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <generate_led_buffer+0x7c>)
 8000a74:	fba3 1302 	umull	r1, r3, r3, r2
 8000a78:	08d9      	lsrs	r1, r3, #3
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	7003      	strb	r3, [r0, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	cccccccd 	.word	0xcccccccd

08000a98 <update7SEG>:

void update7SEG(int index)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    // disable all
    uint16_t mask;
    for (uint8_t i = 0; i < NUM_OF_SEG_LED; i++) mask |= SEG[i];
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	737b      	strb	r3, [r7, #13]
 8000aa4:	e009      	b.n	8000aba <update7SEG+0x22>
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <update7SEG+0x50>)
 8000aaa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	81fb      	strh	r3, [r7, #14]
 8000ab4:	7b7b      	ldrb	r3, [r7, #13]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	737b      	strb	r3, [r7, #13]
 8000aba:	7b7b      	ldrb	r3, [r7, #13]
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d9f2      	bls.n	8000aa6 <update7SEG+0xe>
    HAL_GPIO_WritePin(EN_0_GPIO_Port, mask, DISABLE);
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <update7SEG+0x54>)
 8000ac8:	f000 ffa9 	bl	8001a1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_0_GPIO_Port, SEG[index], ENABLE);
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <update7SEG+0x50>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <update7SEG+0x54>)
 8000ada:	f000 ffa0 	bl	8001a1e <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	08002ca4 	.word	0x08002ca4
 8000aec:	40010800 	.word	0x40010800

08000af0 <scanning_seg>:

void scanning_seg(uint8_t * seg, uint8_t * state, uint8_t size)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	4613      	mov	r3, r2
 8000afc:	71fb      	strb	r3, [r7, #7]
    // disable all
    update7SEG(*seg);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ffc8 	bl	8000a98 <update7SEG>
    display7Seg(*(state + *seg));
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff17 	bl	8000948 <display7Seg>
    *seg = (*seg + 1) % size;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	79fa      	ldrb	r2, [r7, #7]
 8000b22:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b26:	fb01 f202 	mul.w	r2, r1, r2
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <scanning_seg_led>:

void scanning_seg_led()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    static uint8_t seg = 0;
    if (mode == NORMAL_MODE)
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <scanning_seg_led+0x24>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d103      	bne.n	8000b50 <scanning_seg_led+0x14>
        generate_led_buffer(seg_buffer, time_buffer);
 8000b48:	4906      	ldr	r1, [pc, #24]	; (8000b64 <scanning_seg_led+0x28>)
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <scanning_seg_led+0x2c>)
 8000b4c:	f7ff ff64 	bl	8000a18 <generate_led_buffer>
    scanning_seg(&seg, seg_buffer, NUM_OF_SEG_LED);
 8000b50:	2205      	movs	r2, #5
 8000b52:	4905      	ldr	r1, [pc, #20]	; (8000b68 <scanning_seg_led+0x2c>)
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <scanning_seg_led+0x30>)
 8000b56:	f7ff ffcb 	bl	8000af0 <scanning_seg>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000008d 	.word	0x2000008d
 8000b64:	200000b0 	.word	0x200000b0
 8000b68:	200000b4 	.word	0x200000b4
 8000b6c:	200000b9 	.word	0x200000b9

08000b70 <update_7seg_buffer_time>:

void update_7seg_buffer_time()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    if (mode == NORMAL_MODE)
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <update_7seg_buffer_time+0x40>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d117      	bne.n	8000bac <update_7seg_buffer_time+0x3c>
    {
        if (time_buffer[LIGHT_1_SEG] > 0)
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <update_7seg_buffer_time+0x44>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <update_7seg_buffer_time+0x24>
            update_7seg_buffer(LIGHT_1_SEG, time_buffer[LIGHT_1_SEG] - 1);
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <update_7seg_buffer_time+0x44>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f812 	bl	8000bb8 <update_7seg_buffer>
        if (time_buffer[LIGHT_2_SEG] > 0)
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <update_7seg_buffer_time+0x44>)
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <update_7seg_buffer_time+0x3c>
            update_7seg_buffer(LIGHT_2_SEG, time_buffer[LIGHT_2_SEG] - 1);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <update_7seg_buffer_time+0x44>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 f806 	bl	8000bb8 <update_7seg_buffer>
    }
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000008d 	.word	0x2000008d
 8000bb4:	200000b0 	.word	0x200000b0

08000bb8 <update_7seg_buffer>:

void update_7seg_buffer(uint8_t index, uint8_t value)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
    if (index > 3)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d80b      	bhi.n	8000be6 <update_7seg_buffer+0x2e>
        return;
    time_buffer[index] = value;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <update_7seg_buffer+0x38>)
 8000bd2:	79ba      	ldrb	r2, [r7, #6]
 8000bd4:	54ca      	strb	r2, [r1, r3]
    if (index == MODE_SEG) seg_buffer[4] = time_buffer[MODE_SEG];
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d105      	bne.n	8000be8 <update_7seg_buffer+0x30>
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <update_7seg_buffer+0x38>)
 8000bde:	789a      	ldrb	r2, [r3, #2]
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <update_7seg_buffer+0x3c>)
 8000be2:	711a      	strb	r2, [r3, #4]
 8000be4:	e000      	b.n	8000be8 <update_7seg_buffer+0x30>
        return;
 8000be6:	bf00      	nop
}
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	200000b0 	.word	0x200000b0
 8000bf4:	200000b4 	.word	0x200000b4

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f000 fc0c 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f84a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f000 f8d0 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c08:	f000 f882 	bl	8000d10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <main+0x78>)
 8000c0e:	f001 fb65 	bl	80022dc <HAL_TIM_Base_Start_IT>
  Scheduler_Init();
 8000c12:	f000 f93f 	bl	8000e94 <Scheduler_Init>
  light_1 = INIT;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <main+0x7c>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	701a      	strb	r2, [r3, #0]
  light_2 = INIT;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <main+0x80>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	701a      	strb	r2, [r3, #0]
  modify = INIT_SETTING;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <main+0x84>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
  mode = NORMAL_MODE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <main+0x88>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
  Scheduler_Add_Task(&updateTimer, 1, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2101      	movs	r1, #1
 8000c32:	4814      	ldr	r0, [pc, #80]	; (8000c84 <main+0x8c>)
 8000c34:	f000 f970 	bl	8000f18 <Scheduler_Add_Task>
  Scheduler_Add_Task(&modify_run, 1, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <main+0x90>)
 8000c3e:	f000 f96b 	bl	8000f18 <Scheduler_Add_Task>
  Scheduler_Add_Task(&automatic_run, 1, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2101      	movs	r1, #1
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <main+0x94>)
 8000c48:	f000 f966 	bl	8000f18 <Scheduler_Add_Task>
  Scheduler_Add_Task(&button_reading, 1, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2101      	movs	r1, #1
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <main+0x98>)
 8000c52:	f000 f961 	bl	8000f18 <Scheduler_Add_Task>
  Scheduler_Add_Task(&scanning_seg_led, 3, freq_to_tick(FREQ_SCANNING));
 8000c56:	2032      	movs	r0, #50	; 0x32
 8000c58:	f000 fa9c 	bl	8001194 <freq_to_tick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2103      	movs	r1, #3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <main+0x9c>)
 8000c64:	f000 f958 	bl	8000f18 <Scheduler_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Scheduler_Dispatch_Tasks();
 8000c68:	f000 fa22 	bl	80010b0 <Scheduler_Dispatch_Tasks>
 8000c6c:	e7fc      	b.n	8000c68 <main+0x70>
 8000c6e:	bf00      	nop
 8000c70:	200000bc 	.word	0x200000bc
 8000c74:	20000088 	.word	0x20000088
 8000c78:	20000089 	.word	0x20000089
 8000c7c:	2000008c 	.word	0x2000008c
 8000c80:	2000008d 	.word	0x2000008d
 8000c84:	080012e5 	.word	0x080012e5
 8000c88:	0800048d 	.word	0x0800048d
 8000c8c:	0800017d 	.word	0x0800017d
 8000c90:	08000829 	.word	0x08000829
 8000c94:	08000b3d 	.word	0x08000b3d

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2228      	movs	r2, #40	; 0x28
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 ff60 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fed6 	bl	8001a80 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cda:	f000 f8d6 	bl	8000e8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f944 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d02:	f000 f8c2 	bl	8000e8a <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	; 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d56:	f001 fa71 	bl	800223c <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f893 	bl	8000e8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d72:	f001 fbef 	bl	8002554 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f885 	bl	8000e8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d8e:	f001 fdc7 	bl	8002920 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f877 	bl	8000e8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000bc 	.word	0x200000bc

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000dec:	2200      	movs	r2, #0
 8000dee:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000df4:	f000 fe13 	bl	8001a1e <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN_0_Pin
                          |EN_1_Pin|EN_2_Pin|EN_3_Pin|EN_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000df8:	2200      	movs	r2, #0
 8000dfa:	213f      	movs	r1, #63	; 0x3f
 8000dfc:	481a      	ldr	r0, [pc, #104]	; (8000e68 <MX_GPIO_Init+0xc0>)
 8000dfe:	f000 fe0e 	bl	8001a1e <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin EN_0_Pin
                           EN_1_Pin EN_2_Pin EN_3_Pin EN_4_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000e02:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000e06:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN_0_Pin
                          |EN_1_Pin|EN_2_Pin|EN_3_Pin|EN_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4812      	ldr	r0, [pc, #72]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000e1c:	f000 fc6c 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000e20:	233f      	movs	r3, #63	; 0x3f
 8000e22:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <MX_GPIO_Init+0xc0>)
 8000e38:	f000 fc5e 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_0_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin|BTN_1_Pin|BTN_2_Pin;
 8000e3c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_GPIO_Init+0xbc>)
 8000e52:	f000 fc51 	bl	80016f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40010c00 	.word	0x40010c00

08000e6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7c:	d101      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Scheduler_Update();
 8000e7e:	f000 f827 	bl	8000ed0 <Scheduler_Update>
    }
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8e:	b672      	cpsid	i
}
 8000e90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <Error_Handler+0x8>

08000e94 <Scheduler_Init>:
#include "scheduler.h"

Tasks_t tasks;


void Scheduler_Init(void) {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
    tasks.currentTask = NULL;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <Scheduler_Init+0x18>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
    tasks.nTasks = 0;
 8000e9e:	4b03      	ldr	r3, [pc, #12]	; (8000eac <Scheduler_Init+0x18>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000104 	.word	0x20000104

08000eb0 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID()
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
    static uint32_t TaskID = 0;
    return ++TaskID;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <Get_New_Task_ID+0x1c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <Get_New_Task_ID+0x1c>)
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <Get_New_Task_ID+0x1c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000010c 	.word	0x2000010c

08000ed0 <Scheduler_Update>:


void Scheduler_Update(void) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
    if (tasks.currentTask && tasks.currentTask->runMe == 0) {
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <Scheduler_Update+0x44>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d017      	beq.n	8000f0c <Scheduler_Update+0x3c>
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <Scheduler_Update+0x44>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	7c1b      	ldrb	r3, [r3, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d112      	bne.n	8000f0c <Scheduler_Update+0x3c>
		if(tasks.currentTask->delay > 0)
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <Scheduler_Update+0x44>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <Scheduler_Update+0x2a>
			tasks.currentTask->delay--;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <Scheduler_Update+0x44>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	609a      	str	r2, [r3, #8]
		if (tasks.currentTask->delay <= 0) 
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <Scheduler_Update+0x44>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <Scheduler_Update+0x3c>
			tasks.currentTask->runMe = 1;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <Scheduler_Update+0x44>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	741a      	strb	r2, [r3, #16]
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000104 	.word	0x20000104

08000f18 <Scheduler_Add_Task>:

uint32_t Scheduler_Add_Task(void (* pFunction)(void), const uint32_t DELAY, const uint32_t PERIOD) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
    TaskNode *newTask = (TaskNode *)malloc(sizeof(TaskNode));
 8000f24:	2018      	movs	r0, #24
 8000f26:	f001 fd65 	bl	80029f4 <malloc>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	617b      	str	r3, [r7, #20]
    if (newTask == NULL || tasks.nTasks >= MAX_TASKS) {
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <Scheduler_Add_Task+0x24>
 8000f34:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d901      	bls.n	8000f40 <Scheduler_Add_Task+0x28>
        return NOT_VALID_TASK_ID;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e0b1      	b.n	80010a4 <Scheduler_Add_Task+0x18c>
    }

    if (tasks.currentTask == NULL) {
 8000f40:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11e      	bne.n	8000f86 <Scheduler_Add_Task+0x6e>
        tasks.currentTask = newTask;
 8000f48:	4a58      	ldr	r2, [pc, #352]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	6013      	str	r3, [r2, #0]
        tasks.nTasks++;
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a55      	ldr	r2, [pc, #340]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000f56:	6053      	str	r3, [r2, #4]
        newTask->pTask = pFunction;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]
        newTask->delay = DELAY;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	609a      	str	r2, [r3, #8]
        newTask->period = PERIOD;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	60da      	str	r2, [r3, #12]
        newTask->runMe = 0;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	741a      	strb	r2, [r3, #16]
        newTask->TaskID = Get_New_Task_ID();
 8000f70:	f7ff ff9e 	bl	8000eb0 <Get_New_Task_ID>
 8000f74:	4602      	mov	r2, r0
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	615a      	str	r2, [r3, #20]
        newTask->next = NULL;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
        return newTask->TaskID;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	e08e      	b.n	80010a4 <Scheduler_Add_Task+0x18c>
    }

    TaskNode *temp_task;
    TaskNode *preTask = NULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    uint8_t newTaskIndex = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0, temp_task = tasks.currentTask; 
 8000f96:	2300      	movs	r3, #0
 8000f98:	77fb      	strb	r3, [r7, #31]
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa0:	e079      	b.n	8001096 <Scheduler_Add_Task+0x17e>
         newTaskIndex < tasks.nTasks; newTaskIndex++, 
         preTask = temp_task, temp_task = temp_task->next) {

		sumDelay = sumDelay + temp_task->delay;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4413      	add	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
		//  sumDelay > DELAY -> new task need to be added before current task pointer
		if(sumDelay > DELAY){
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d938      	bls.n	8001026 <Scheduler_Add_Task+0x10e>
			// because new task will be added before current task pointer 
			// so the delay of new task will be calculated
			newDelay = DELAY - (sumDelay - temp_task->delay);
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
			// and the delay of current task will be reduced
			temp_task->delay = sumDelay - DELAY;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad2      	subs	r2, r2, r3
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	609a      	str	r2, [r3, #8]
            // move all task after current task pointer to the next index
            newTask->next = temp_task;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd0:	605a      	str	r2, [r3, #4]
            // avoid preTask is empty when add new task at the first index
            if (preTask)
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <Scheduler_Add_Task+0xc8>
                preTask->next = newTask;
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	e002      	b.n	8000fe6 <Scheduler_Add_Task+0xce>
            else 
                tasks.currentTask = newTask;
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <Scheduler_Add_Task+0x194>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	6013      	str	r3, [r2, #0]
            // add new task to the current task pointer
            newTask->pTask = pFunction;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	601a      	str	r2, [r3, #0]
            newTask->delay = newDelay;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	609a      	str	r2, [r3, #8]
            newTask->period = PERIOD;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
            newTask->runMe = newTask->delay == 0 ? 1 : 0;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	741a      	strb	r2, [r3, #16]
            newTask->TaskID = Get_New_Task_ID();
 800100c:	f7ff ff50 	bl	8000eb0 <Get_New_Task_ID>
 8001010:	4602      	mov	r2, r0
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	615a      	str	r2, [r3, #20]
            tasks.nTasks++;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <Scheduler_Add_Task+0x194>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	3301      	adds	r3, #1
 800101c:	4a23      	ldr	r2, [pc, #140]	; (80010ac <Scheduler_Add_Task+0x194>)
 800101e:	6053      	str	r3, [r2, #4]
            return newTask->TaskID;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	e03e      	b.n	80010a4 <Scheduler_Add_Task+0x18c>
		}
        else {
            if (newTaskIndex == tasks.nTasks - 1)
 8001026:	7ffa      	ldrb	r2, [r7, #31]
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <Scheduler_Add_Task+0x194>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	3b01      	subs	r3, #1
 800102e:	429a      	cmp	r2, r3
 8001030:	d129      	bne.n	8001086 <Scheduler_Add_Task+0x16e>
            {
                newDelay = DELAY - sumDelay;
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	613b      	str	r3, [r7, #16]
                temp_task->next = newTask;
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	605a      	str	r2, [r3, #4]
                newTask->next = NULL;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]

                // add new task to the current task pointer
                newTask->pTask = pFunction;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	601a      	str	r2, [r3, #0]
                newTask->delay = newDelay;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	609a      	str	r2, [r3, #8]
                newTask->period = PERIOD;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]
                newTask->runMe = newTask->delay == 0 ? 1 : 0;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	741a      	strb	r2, [r3, #16]
                newTask->TaskID = Get_New_Task_ID();
 800106c:	f7ff ff20 	bl	8000eb0 <Get_New_Task_ID>
 8001070:	4602      	mov	r2, r0
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	615a      	str	r2, [r3, #20]
                tasks.nTasks++;
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <Scheduler_Add_Task+0x194>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <Scheduler_Add_Task+0x194>)
 800107e:	6053      	str	r3, [r2, #4]
                return newTask->TaskID;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	e00e      	b.n	80010a4 <Scheduler_Add_Task+0x18c>
         newTaskIndex < tasks.nTasks; newTaskIndex++, 
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	3301      	adds	r3, #1
 800108a:	77fb      	strb	r3, [r7, #31]
         preTask = temp_task, temp_task = temp_task->next) {
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	623b      	str	r3, [r7, #32]
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
         newTaskIndex < tasks.nTasks; newTaskIndex++, 
 8001096:	7ffa      	ldrb	r2, [r7, #31]
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <Scheduler_Add_Task+0x194>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	d380      	bcc.n	8000fa2 <Scheduler_Add_Task+0x8a>
            }
        }
	}
	return newTask->TaskID;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	695b      	ldr	r3, [r3, #20]

}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000104 	.word	0x20000104

080010b0 <Scheduler_Dispatch_Tasks>:

void Scheduler_Dispatch_Tasks() {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
	if(tasks.currentTask->runMe > 0) {
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <Scheduler_Dispatch_Tasks+0x5c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	7c1b      	ldrb	r3, [r3, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d021      	beq.n	8001104 <Scheduler_Dispatch_Tasks+0x54>
		(*(tasks.currentTask->pTask))(); // Run the task
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <Scheduler_Dispatch_Tasks+0x5c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4798      	blx	r3
		tasks.currentTask->runMe = 0; // Reset / reduce RunMe flag
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <Scheduler_Dispatch_Tasks+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2200      	movs	r2, #0
 80010ce:	741a      	strb	r2, [r3, #16]
		TaskNode temtask = *(tasks.currentTask);
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <Scheduler_Dispatch_Tasks+0x5c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	463c      	mov	r4, r7
 80010d6:	461d      	mov	r5, r3
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010e0:	e884 0003 	stmia.w	r4, {r0, r1}
		if (temtask.period != 0 && Scheduler_Remove_Task(temtask.TaskID)) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00c      	beq.n	8001104 <Scheduler_Dispatch_Tasks+0x54>
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f80f 	bl	8001110 <Scheduler_Remove_Task>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <Scheduler_Dispatch_Tasks+0x54>
			Scheduler_Add_Task(temtask.pTask, temtask.period, temtask.period);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff0a 	bl	8000f18 <Scheduler_Add_Task>
		}
	}
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bdb0      	pop	{r4, r5, r7, pc}
 800110c:	20000104 	.word	0x20000104

08001110 <Scheduler_Remove_Task>:

uint8_t Scheduler_Remove_Task( uint32_t TaskID) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    if (TaskID != NOT_VALID_TASK_ID)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d033      	beq.n	8001186 <Scheduler_Remove_Task+0x76>
    {
        TaskNode *temp_task;
        TaskNode *preTask = NULL;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
        uint8_t taskIndex = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
        for (taskIndex = 0, temp_task = tasks.currentTask; 
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <Scheduler_Remove_Task+0x80>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e024      	b.n	800117c <Scheduler_Remove_Task+0x6c>
             taskIndex < tasks.nTasks; taskIndex++, 
             preTask = temp_task, temp_task = temp_task->next) {
            if (temp_task->TaskID == TaskID) {
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d117      	bne.n	800116c <Scheduler_Remove_Task+0x5c>
                if (temp_task == tasks.currentTask) {
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <Scheduler_Remove_Task+0x80>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	429a      	cmp	r2, r3
 8001144:	d104      	bne.n	8001150 <Scheduler_Remove_Task+0x40>
                    tasks.currentTask = temp_task->next;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a11      	ldr	r2, [pc, #68]	; (8001190 <Scheduler_Remove_Task+0x80>)
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e003      	b.n	8001158 <Scheduler_Remove_Task+0x48>
                }
                else {
                    preTask->next = temp_task->next;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	605a      	str	r2, [r3, #4]
                }
                free(temp_task);
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f001 fc53 	bl	8002a04 <free>
                tasks.nTasks--;
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <Scheduler_Remove_Task+0x80>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <Scheduler_Remove_Task+0x80>)
 8001166:	6053      	str	r3, [r2, #4]
                return 1;
 8001168:	2301      	movs	r3, #1
 800116a:	e00d      	b.n	8001188 <Scheduler_Remove_Task+0x78>
             taskIndex < tasks.nTasks; taskIndex++, 
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	3301      	adds	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
             preTask = temp_task, temp_task = temp_task->next) {
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	617b      	str	r3, [r7, #20]
             taskIndex < tasks.nTasks; taskIndex++, 
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <Scheduler_Remove_Task+0x80>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3d5      	bcc.n	8001132 <Scheduler_Remove_Task+0x22>
            }
        }
    }
	return 0; // return status
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000104 	.word	0x20000104

08001194 <freq_to_tick>:

uint16_t freq_to_tick(uint16_t freq)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
    uint16_t tick = FREQ_TO_TICK(freq);
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <freq_to_tick+0x38>)
 80011aa:	fb82 1203 	smull	r1, r2, r2, r3
 80011ae:	1092      	asrs	r2, r2, #2
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	81fb      	strh	r3, [r7, #14]
    if (tick < 1)
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <freq_to_tick+0x2c>
        tick = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	81fb      	strh	r3, [r7, #14]
    return tick;
 80011c0:	89fb      	ldrh	r3, [r7, #14]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	66666667 	.word	0x66666667

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_MspInit+0x40>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_MspInit+0x40>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_MspInit+0x40>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_MspInit+0x40>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_MspInit+0x40>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_MspInit+0x40>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d113      	bne.n	800124e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201c      	movs	r0, #28
 8001244:	f000 fa21 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001248:	201c      	movs	r0, #28
 800124a:	f000 fa3a 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f8ff 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f001 f85f 	bl	8002374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000bc 	.word	0x200000bc

080012c0 <setTimer>:
#include "main.h"

uint32_t timer[MAX_TIMER];

void setTimer(uint8_t timerID, uint32_t time)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
    if (timerID < 0 && timerID >= MAX_TIMER) return;
    timer[timerID] = time;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4904      	ldr	r1, [pc, #16]	; (80012e0 <setTimer+0x20>)
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000110 	.word	0x20000110

080012e4 <updateTimer>:

void updateTimer(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < MAX_TIMER; i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	e010      	b.n	8001312 <updateTimer+0x2e>
    {
        if (timer[i] > 0)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <updateTimer+0x40>)
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <updateTimer+0x28>
            timer[i]--;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <updateTimer+0x40>)
 8001300:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001304:	3a01      	subs	r2, #1
 8001306:	4907      	ldr	r1, [pc, #28]	; (8001324 <updateTimer+0x40>)
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < MAX_TIMER; i++)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	3301      	adds	r3, #1
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b09      	cmp	r3, #9
 8001316:	d9eb      	bls.n	80012f0 <updateTimer+0xc>
    }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000110 	.word	0x20000110

08001328 <isTimerExpired>:

uint8_t isTimerExpired(uint8_t timerID)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
    if (timerID < 0 && timerID >= MAX_TIMER) return 0;
    if (timer[timerID] == 0)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <isTimerExpired+0x28>)
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <isTimerExpired+0x1a>
        return 1;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <isTimerExpired+0x1c>
    return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000110 	.word	0x20000110

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f001 fc0a 	bl	8002b9c <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20002800 	.word	0x20002800
 80013b4:	00000400 	.word	0x00000400
 80013b8:	20000138 	.word	0x20000138
 80013bc:	20000288 	.word	0x20000288

080013c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c0:	f000 f823 	bl	800140a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013c6:	490c      	ldr	r1, [pc, #48]	; (80013f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013dc:	4c09      	ldr	r4, [pc, #36]	; (8001404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f001 fbdd 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ee:	f7ff fc03 	bl	8000bf8 <main>
  bx lr
 80013f2:	4770      	bx	lr
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013fc:	08002cdc 	.word	0x08002cdc
  ldr r2, =_sbss
 8001400:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001404:	20000288 	.word	0x20000288

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>

0800140a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x28>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x28>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f923 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fecc 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f93b 	bl	80016de <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f903 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000010 	.word	0x20000010
 800149c:	20000018 	.word	0x20000018
 80014a0:	20000014 	.word	0x20000014

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_IncTick+0x20>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000018 	.word	0x20000018
 80014c4:	2000013c 	.word	0x2000013c

080014c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	2000013c 	.word	0x2000013c

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <__NVIC_EnableIRQ+0x34>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff90 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff2d 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff42 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff35 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e161      	b.n	80019d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800170c:	2201      	movs	r2, #1
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8150 	bne.w	80019ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a97      	ldr	r2, [pc, #604]	; (800198c <HAL_GPIO_Init+0x294>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d05e      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001734:	4a95      	ldr	r2, [pc, #596]	; (800198c <HAL_GPIO_Init+0x294>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d875      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800173a:	4a95      	ldr	r2, [pc, #596]	; (8001990 <HAL_GPIO_Init+0x298>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d058      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001740:	4a93      	ldr	r2, [pc, #588]	; (8001990 <HAL_GPIO_Init+0x298>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d86f      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001746:	4a93      	ldr	r2, [pc, #588]	; (8001994 <HAL_GPIO_Init+0x29c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d052      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 800174c:	4a91      	ldr	r2, [pc, #580]	; (8001994 <HAL_GPIO_Init+0x29c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d869      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001752:	4a91      	ldr	r2, [pc, #580]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04c      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001758:	4a8f      	ldr	r2, [pc, #572]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d863      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800175e:	4a8f      	ldr	r2, [pc, #572]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d046      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001764:	4a8d      	ldr	r2, [pc, #564]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d85d      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d82a      	bhi.n	80017c4 <HAL_GPIO_Init+0xcc>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d859      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_GPIO_Init+0x80>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017df 	.word	0x080017df
 8001784:	08001821 	.word	0x08001821
 8001788:	08001827 	.word	0x08001827
 800178c:	08001827 	.word	0x08001827
 8001790:	08001827 	.word	0x08001827
 8001794:	08001827 	.word	0x08001827
 8001798:	08001827 	.word	0x08001827
 800179c:	08001827 	.word	0x08001827
 80017a0:	08001827 	.word	0x08001827
 80017a4:	08001827 	.word	0x08001827
 80017a8:	08001827 	.word	0x08001827
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001827 	.word	0x08001827
 80017b4:	08001827 	.word	0x08001827
 80017b8:	08001827 	.word	0x08001827
 80017bc:	080017d5 	.word	0x080017d5
 80017c0:	080017e9 	.word	0x080017e9
 80017c4:	4a76      	ldr	r2, [pc, #472]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ca:	e02c      	b.n	8001826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e029      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	3304      	adds	r3, #4
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e024      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3308      	adds	r3, #8
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e01f      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	330c      	adds	r3, #12
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e01a      	b.n	8001828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fa:	2304      	movs	r3, #4
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e013      	b.n	8001828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	611a      	str	r2, [r3, #16]
          break;
 8001812:	e009      	b.n	8001828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	615a      	str	r2, [r3, #20]
          break;
 800181e:	e003      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x130>
          break;
 8001826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d801      	bhi.n	8001832 <HAL_GPIO_Init+0x13a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_Init+0x13e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d802      	bhi.n	8001844 <HAL_GPIO_Init+0x14c>
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x152>
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3b08      	subs	r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	210f      	movs	r1, #15
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	6a39      	ldr	r1, [r7, #32]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a9 	beq.w	80019ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001890:	4a45      	ldr	r2, [pc, #276]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_GPIO_Init+0x2b4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00d      	beq.n	80018d8 <HAL_GPIO_Init+0x1e0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x1dc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_Init+0x1d8>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	492b      	ldr	r1, [pc, #172]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4921      	ldr	r1, [pc, #132]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491d      	ldr	r1, [pc, #116]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4917      	ldr	r1, [pc, #92]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4913      	ldr	r1, [pc, #76]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800196c:	4013      	ands	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01f      	beq.n	80019bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	490d      	ldr	r1, [pc, #52]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e01f      	b.n	80019ca <HAL_GPIO_Init+0x2d2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_GPIO_Init+0x2f4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <HAL_GPIO_Init+0x2f4>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f ae96 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	372c      	adds	r7, #44	; 0x2c
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a2e:	787b      	ldrb	r3, [r7, #1]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a3a:	e003      	b.n	8001a44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	041a      	lsls	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	041a      	lsls	r2, r3, #16
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	400b      	ands	r3, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e272      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8087 	beq.w	8001bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aac:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d112      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06c      	beq.n	8001bac <HAL_RCC_OscConfig+0x12c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d168      	bne.n	8001bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e24c      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x76>
 8001ae8:	4b80      	ldr	r3, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a7f      	ldr	r2, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e02e      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b78      	ldr	r3, [pc, #480]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a77      	ldr	r2, [pc, #476]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0xbc>
 8001b22:	4b72      	ldr	r3, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a71      	ldr	r2, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fcb4 	bl	80014c8 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fcb0 	bl	80014c8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e200      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe4>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fca0 	bl	80014c8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fc9c 	bl	80014c8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1ec      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x10c>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc6:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1c0      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4939      	ldr	r1, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fc55 	bl	80014c8 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fc51 	bl	80014c8 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1a1      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fc34 	bl	80014c8 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc30 	bl	80014c8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e180      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d03a      	beq.n	8001d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d019      	beq.n	8001cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fc14 	bl	80014c8 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fc10 	bl	80014c8 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e160      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 fa9c 	bl	8002200 <RCC_Delay>
 8001cc8:	e01c      	b.n	8001d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fbfa 	bl	80014c8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fbf6 	bl	80014c8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d908      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e146      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	42420000 	.word	0x42420000
 8001cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b92      	ldr	r3, [pc, #584]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e9      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a6 	beq.w	8001e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b8b      	ldr	r3, [pc, #556]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a87      	ldr	r2, [pc, #540]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b85      	ldr	r3, [pc, #532]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7e      	ldr	r2, [pc, #504]	; (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fbb7 	bl	80014c8 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff fbb3 	bl	80014c8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e103      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x4c8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a6e      	ldr	r2, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e02d      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x334>
 8001d9a:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a69      	ldr	r2, [pc, #420]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a66      	ldr	r2, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	e01c      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x356>
 8001dbc:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a60      	ldr	r2, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a5d      	ldr	r2, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a5a      	ldr	r2, [pc, #360]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a57      	ldr	r2, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fb67 	bl	80014c8 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fb63 	bl	80014c8 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0b1      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ee      	beq.n	8001dfe <HAL_RCC_OscConfig+0x37e>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7ff fb51 	bl	80014c8 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fb4d 	bl	80014c8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e09b      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a3b      	ldr	r2, [pc, #236]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8087 	beq.w	8001f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d061      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d146      	bne.n	8001f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fb21 	bl	80014c8 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff fb1d 	bl	80014c8 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e06d      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4921      	ldr	r1, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a19      	ldr	r1, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	491b      	ldr	r1, [pc, #108]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4cc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff faf1 	bl	80014c8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff faed 	bl	80014c8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e03d      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
 8001f08:	e035      	b.n	8001f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fada 	bl	80014c8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fad6 	bl	80014c8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e026      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x498>
 8001f36:	e01e      	b.n	8001f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e019      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x500>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0d0      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4965      	ldr	r1, [pc, #404]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b8      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe0:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	494d      	ldr	r1, [pc, #308]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d040      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e07f      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e073      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06b      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4936      	ldr	r1, [pc, #216]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002074:	f7ff fa28 	bl	80014c8 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7ff fa24 	bl	80014c8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e053      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d210      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4922      	ldr	r1, [pc, #136]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e032      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4916      	ldr	r1, [pc, #88]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002112:	f000 f821 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002116:	4602      	mov	r2, r0
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	490a      	ldr	r1, [pc, #40]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	5ccb      	ldrb	r3, [r1, r3]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1cc>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f986 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	08002cb0 	.word	0x08002cb0
 8002150:	20000010 	.word	0x20000010
 8002154:	20000014 	.word	0x20000014

08002158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x30>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x36>
 8002186:	e027      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800218a:	613b      	str	r3, [r7, #16]
      break;
 800218c:	e027      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0c5b      	lsrs	r3, r3, #17
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	613b      	str	r3, [r7, #16]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	693b      	ldr	r3, [r7, #16]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08002cc0 	.word	0x08002cc0
 80021f8:	08002cd0 	.word	0x08002cd0
 80021fc:	003d0900 	.word	0x003d0900

08002200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <RCC_Delay+0x34>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <RCC_Delay+0x38>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a5b      	lsrs	r3, r3, #9
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800221c:	bf00      	nop
  }
  while (Delay --);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	60fa      	str	r2, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <RCC_Delay+0x1c>
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000010 	.word	0x20000010
 8002238:	10624dd3 	.word	0x10624dd3

0800223c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e041      	b.n	80022d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe ffd6 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 fa56 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d001      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e035      	b.n	8002360 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <HAL_TIM_Base_Start_IT+0x90>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x4e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d004      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x4e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_TIM_Base_Start_IT+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d111      	bne.n	800234e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d010      	beq.n	800235e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234c:	e007      	b.n	800235e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40000400 	.word	0x40000400

08002374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d020      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0202 	mvn.w	r2, #2
 80023a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f998 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f98b 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f99a 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0204 	mvn.w	r2, #4
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f972 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f965 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f974 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0208 	mvn.w	r2, #8
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f94c 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f93f 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f94e 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0210 	mvn.w	r2, #16
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2208      	movs	r2, #8
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f926 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f919 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f928 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0201 	mvn.w	r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fcc6 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa6f 	bl	80029e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8f8 	bl	8002718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0220 	mvn.w	r2, #32
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa42 	bl	80029d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_TIM_ConfigClockSource+0x1c>
 800256c:	2302      	movs	r3, #2
 800256e:	e0b4      	b.n	80026da <HAL_TIM_ConfigClockSource+0x186>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a8:	d03e      	beq.n	8002628 <HAL_TIM_ConfigClockSource+0xd4>
 80025aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ae:	f200 8087 	bhi.w	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b6:	f000 8086 	beq.w	80026c6 <HAL_TIM_ConfigClockSource+0x172>
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	d87f      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d01a      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0xa6>
 80025c4:	2b70      	cmp	r3, #112	; 0x70
 80025c6:	d87b      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d050      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x11a>
 80025cc:	2b60      	cmp	r3, #96	; 0x60
 80025ce:	d877      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b50      	cmp	r3, #80	; 0x50
 80025d2:	d03c      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xfa>
 80025d4:	2b50      	cmp	r3, #80	; 0x50
 80025d6:	d873      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d058      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x13a>
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d86f      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b30      	cmp	r3, #48	; 0x30
 80025e2:	d064      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025e4:	2b30      	cmp	r3, #48	; 0x30
 80025e6:	d86b      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d060      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d867      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05c      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d05a      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025f8:	e062      	b.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800260a:	f000 f96a 	bl	80028e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800261c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	609a      	str	r2, [r3, #8]
      break;
 8002626:	e04f      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002638:	f000 f953 	bl	80028e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264a:	609a      	str	r2, [r3, #8]
      break;
 800264c:	e03c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f8ca 	bl	80027f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2150      	movs	r1, #80	; 0x50
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f921 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 800266c:	e02c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800267a:	461a      	mov	r2, r3
 800267c:	f000 f8e8 	bl	8002850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2160      	movs	r1, #96	; 0x60
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f911 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 800268c:	e01c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800269a:	461a      	mov	r2, r3
 800269c:	f000 f8aa 	bl	80027f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2140      	movs	r1, #64	; 0x40
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f901 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80026ac:	e00c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 f8f8 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80026be:	e003      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e000      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <TIM_Base_SetConfig+0xc4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a20      	ldr	r2, [pc, #128]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <TIM_Base_SetConfig+0xc4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
  }
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400

080027f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 0201 	bic.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 030a 	bic.w	r3, r3, #10
 8002830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800287a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	031b      	lsls	r3, r3, #12
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800288c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	621a      	str	r2, [r3, #32]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f043 0307 	orr.w	r3, r3, #7
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002934:	2302      	movs	r3, #2
 8002936:	e041      	b.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d004      	beq.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d10c      	bne.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400

080029d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <malloc>:
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <malloc+0xc>)
 80029f6:	4601      	mov	r1, r0
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	f000 b82b 	b.w	8002a54 <_malloc_r>
 80029fe:	bf00      	nop
 8002a00:	20000068 	.word	0x20000068

08002a04 <free>:
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <free+0xc>)
 8002a06:	4601      	mov	r1, r0
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	f000 b8f3 	b.w	8002bf4 <_free_r>
 8002a0e:	bf00      	nop
 8002a10:	20000068 	.word	0x20000068

08002a14 <sbrk_aligned>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4e0e      	ldr	r6, [pc, #56]	; (8002a50 <sbrk_aligned+0x3c>)
 8002a18:	460c      	mov	r4, r1
 8002a1a:	6831      	ldr	r1, [r6, #0]
 8002a1c:	4605      	mov	r5, r0
 8002a1e:	b911      	cbnz	r1, 8002a26 <sbrk_aligned+0x12>
 8002a20:	f000 f8ac 	bl	8002b7c <_sbrk_r>
 8002a24:	6030      	str	r0, [r6, #0]
 8002a26:	4621      	mov	r1, r4
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f000 f8a7 	bl	8002b7c <_sbrk_r>
 8002a2e:	1c43      	adds	r3, r0, #1
 8002a30:	d00a      	beq.n	8002a48 <sbrk_aligned+0x34>
 8002a32:	1cc4      	adds	r4, r0, #3
 8002a34:	f024 0403 	bic.w	r4, r4, #3
 8002a38:	42a0      	cmp	r0, r4
 8002a3a:	d007      	beq.n	8002a4c <sbrk_aligned+0x38>
 8002a3c:	1a21      	subs	r1, r4, r0
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f000 f89c 	bl	8002b7c <_sbrk_r>
 8002a44:	3001      	adds	r0, #1
 8002a46:	d101      	bne.n	8002a4c <sbrk_aligned+0x38>
 8002a48:	f04f 34ff 	mov.w	r4, #4294967295
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	20000144 	.word	0x20000144

08002a54 <_malloc_r>:
 8002a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a58:	1ccd      	adds	r5, r1, #3
 8002a5a:	f025 0503 	bic.w	r5, r5, #3
 8002a5e:	3508      	adds	r5, #8
 8002a60:	2d0c      	cmp	r5, #12
 8002a62:	bf38      	it	cc
 8002a64:	250c      	movcc	r5, #12
 8002a66:	2d00      	cmp	r5, #0
 8002a68:	4607      	mov	r7, r0
 8002a6a:	db01      	blt.n	8002a70 <_malloc_r+0x1c>
 8002a6c:	42a9      	cmp	r1, r5
 8002a6e:	d905      	bls.n	8002a7c <_malloc_r+0x28>
 8002a70:	230c      	movs	r3, #12
 8002a72:	2600      	movs	r6, #0
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4630      	mov	r0, r6
 8002a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b50 <_malloc_r+0xfc>
 8002a80:	f000 f868 	bl	8002b54 <__malloc_lock>
 8002a84:	f8d8 3000 	ldr.w	r3, [r8]
 8002a88:	461c      	mov	r4, r3
 8002a8a:	bb5c      	cbnz	r4, 8002ae4 <_malloc_r+0x90>
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4638      	mov	r0, r7
 8002a90:	f7ff ffc0 	bl	8002a14 <sbrk_aligned>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	4604      	mov	r4, r0
 8002a98:	d155      	bne.n	8002b46 <_malloc_r+0xf2>
 8002a9a:	f8d8 4000 	ldr.w	r4, [r8]
 8002a9e:	4626      	mov	r6, r4
 8002aa0:	2e00      	cmp	r6, #0
 8002aa2:	d145      	bne.n	8002b30 <_malloc_r+0xdc>
 8002aa4:	2c00      	cmp	r4, #0
 8002aa6:	d048      	beq.n	8002b3a <_malloc_r+0xe6>
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	4631      	mov	r1, r6
 8002aac:	4638      	mov	r0, r7
 8002aae:	eb04 0903 	add.w	r9, r4, r3
 8002ab2:	f000 f863 	bl	8002b7c <_sbrk_r>
 8002ab6:	4581      	cmp	r9, r0
 8002ab8:	d13f      	bne.n	8002b3a <_malloc_r+0xe6>
 8002aba:	6821      	ldr	r1, [r4, #0]
 8002abc:	4638      	mov	r0, r7
 8002abe:	1a6d      	subs	r5, r5, r1
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7ff ffa7 	bl	8002a14 <sbrk_aligned>
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d037      	beq.n	8002b3a <_malloc_r+0xe6>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	442b      	add	r3, r5
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d038      	beq.n	8002b4a <_malloc_r+0xf6>
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d12b      	bne.n	8002b36 <_malloc_r+0xe2>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e00f      	b.n	8002b04 <_malloc_r+0xb0>
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	1b52      	subs	r2, r2, r5
 8002ae8:	d41f      	bmi.n	8002b2a <_malloc_r+0xd6>
 8002aea:	2a0b      	cmp	r2, #11
 8002aec:	d917      	bls.n	8002b1e <_malloc_r+0xca>
 8002aee:	1961      	adds	r1, r4, r5
 8002af0:	42a3      	cmp	r3, r4
 8002af2:	6025      	str	r5, [r4, #0]
 8002af4:	bf18      	it	ne
 8002af6:	6059      	strne	r1, [r3, #4]
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	bf08      	it	eq
 8002afc:	f8c8 1000 	streq.w	r1, [r8]
 8002b00:	5162      	str	r2, [r4, r5]
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	4638      	mov	r0, r7
 8002b06:	f104 060b 	add.w	r6, r4, #11
 8002b0a:	f000 f829 	bl	8002b60 <__malloc_unlock>
 8002b0e:	f026 0607 	bic.w	r6, r6, #7
 8002b12:	1d23      	adds	r3, r4, #4
 8002b14:	1af2      	subs	r2, r6, r3
 8002b16:	d0ae      	beq.n	8002a76 <_malloc_r+0x22>
 8002b18:	1b9b      	subs	r3, r3, r6
 8002b1a:	50a3      	str	r3, [r4, r2]
 8002b1c:	e7ab      	b.n	8002a76 <_malloc_r+0x22>
 8002b1e:	42a3      	cmp	r3, r4
 8002b20:	6862      	ldr	r2, [r4, #4]
 8002b22:	d1dd      	bne.n	8002ae0 <_malloc_r+0x8c>
 8002b24:	f8c8 2000 	str.w	r2, [r8]
 8002b28:	e7ec      	b.n	8002b04 <_malloc_r+0xb0>
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	6864      	ldr	r4, [r4, #4]
 8002b2e:	e7ac      	b.n	8002a8a <_malloc_r+0x36>
 8002b30:	4634      	mov	r4, r6
 8002b32:	6876      	ldr	r6, [r6, #4]
 8002b34:	e7b4      	b.n	8002aa0 <_malloc_r+0x4c>
 8002b36:	4613      	mov	r3, r2
 8002b38:	e7cc      	b.n	8002ad4 <_malloc_r+0x80>
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	4638      	mov	r0, r7
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	f000 f80e 	bl	8002b60 <__malloc_unlock>
 8002b44:	e797      	b.n	8002a76 <_malloc_r+0x22>
 8002b46:	6025      	str	r5, [r4, #0]
 8002b48:	e7dc      	b.n	8002b04 <_malloc_r+0xb0>
 8002b4a:	605b      	str	r3, [r3, #4]
 8002b4c:	deff      	udf	#255	; 0xff
 8002b4e:	bf00      	nop
 8002b50:	20000140 	.word	0x20000140

08002b54 <__malloc_lock>:
 8002b54:	4801      	ldr	r0, [pc, #4]	; (8002b5c <__malloc_lock+0x8>)
 8002b56:	f000 b84b 	b.w	8002bf0 <__retarget_lock_acquire_recursive>
 8002b5a:	bf00      	nop
 8002b5c:	20000284 	.word	0x20000284

08002b60 <__malloc_unlock>:
 8002b60:	4801      	ldr	r0, [pc, #4]	; (8002b68 <__malloc_unlock+0x8>)
 8002b62:	f000 b846 	b.w	8002bf2 <__retarget_lock_release_recursive>
 8002b66:	bf00      	nop
 8002b68:	20000284 	.word	0x20000284

08002b6c <memset>:
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4402      	add	r2, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <_sbrk_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	2300      	movs	r3, #0
 8002b80:	4d05      	ldr	r5, [pc, #20]	; (8002b98 <_sbrk_r+0x1c>)
 8002b82:	4604      	mov	r4, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	602b      	str	r3, [r5, #0]
 8002b88:	f7fe fbe4 	bl	8001354 <_sbrk>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d102      	bne.n	8002b96 <_sbrk_r+0x1a>
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	b103      	cbz	r3, 8002b96 <_sbrk_r+0x1a>
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
 8002b98:	20000280 	.word	0x20000280

08002b9c <__errno>:
 8002b9c:	4b01      	ldr	r3, [pc, #4]	; (8002ba4 <__errno+0x8>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000068 	.word	0x20000068

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2600      	movs	r6, #0
 8002bac:	4d0c      	ldr	r5, [pc, #48]	; (8002be0 <__libc_init_array+0x38>)
 8002bae:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	f000 f864 	bl	8002c84 <_init>
 8002bbc:	2600      	movs	r6, #0
 8002bbe:	4d0a      	ldr	r5, [pc, #40]	; (8002be8 <__libc_init_array+0x40>)
 8002bc0:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <__libc_init_array+0x44>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	42a6      	cmp	r6, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd0:	4798      	blx	r3
 8002bd2:	3601      	adds	r6, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bda:	4798      	blx	r3
 8002bdc:	3601      	adds	r6, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	08002cd4 	.word	0x08002cd4
 8002be4:	08002cd4 	.word	0x08002cd4
 8002be8:	08002cd4 	.word	0x08002cd4
 8002bec:	08002cd8 	.word	0x08002cd8

08002bf0 <__retarget_lock_acquire_recursive>:
 8002bf0:	4770      	bx	lr

08002bf2 <__retarget_lock_release_recursive>:
 8002bf2:	4770      	bx	lr

08002bf4 <_free_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	d040      	beq.n	8002c7e <_free_r+0x8a>
 8002bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c00:	1f0c      	subs	r4, r1, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bfb8      	it	lt
 8002c06:	18e4      	addlt	r4, r4, r3
 8002c08:	f7ff ffa4 	bl	8002b54 <__malloc_lock>
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <_free_r+0x8c>)
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	b933      	cbnz	r3, 8002c20 <_free_r+0x2c>
 8002c12:	6063      	str	r3, [r4, #4]
 8002c14:	6014      	str	r4, [r2, #0]
 8002c16:	4628      	mov	r0, r5
 8002c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c1c:	f7ff bfa0 	b.w	8002b60 <__malloc_unlock>
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d908      	bls.n	8002c36 <_free_r+0x42>
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	1821      	adds	r1, r4, r0
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	bf01      	itttt	eq
 8002c2c:	6819      	ldreq	r1, [r3, #0]
 8002c2e:	685b      	ldreq	r3, [r3, #4]
 8002c30:	1809      	addeq	r1, r1, r0
 8002c32:	6021      	streq	r1, [r4, #0]
 8002c34:	e7ed      	b.n	8002c12 <_free_r+0x1e>
 8002c36:	461a      	mov	r2, r3
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b10b      	cbz	r3, 8002c40 <_free_r+0x4c>
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d9fa      	bls.n	8002c36 <_free_r+0x42>
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	1850      	adds	r0, r2, r1
 8002c44:	42a0      	cmp	r0, r4
 8002c46:	d10b      	bne.n	8002c60 <_free_r+0x6c>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	4401      	add	r1, r0
 8002c4c:	1850      	adds	r0, r2, r1
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	d1e0      	bne.n	8002c16 <_free_r+0x22>
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4408      	add	r0, r1
 8002c5a:	6010      	str	r0, [r2, #0]
 8002c5c:	6053      	str	r3, [r2, #4]
 8002c5e:	e7da      	b.n	8002c16 <_free_r+0x22>
 8002c60:	d902      	bls.n	8002c68 <_free_r+0x74>
 8002c62:	230c      	movs	r3, #12
 8002c64:	602b      	str	r3, [r5, #0]
 8002c66:	e7d6      	b.n	8002c16 <_free_r+0x22>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	1821      	adds	r1, r4, r0
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	bf01      	itttt	eq
 8002c70:	6819      	ldreq	r1, [r3, #0]
 8002c72:	685b      	ldreq	r3, [r3, #4]
 8002c74:	1809      	addeq	r1, r1, r0
 8002c76:	6021      	streq	r1, [r4, #0]
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	6054      	str	r4, [r2, #4]
 8002c7c:	e7cb      	b.n	8002c16 <_free_r+0x22>
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}
 8002c80:	20000140 	.word	0x20000140

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
